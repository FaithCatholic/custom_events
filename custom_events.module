<?php

use Drupal\calendar\CalendarHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter()
 */
function custom_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-events-calendar-page-1') {
    $form['#attached']['library'][] = 'custom_events/custom_events.enable';
    $form['#attached']['library'][] = 'custom_events/custom_events.forms';

    // Prevent focus from highjacking scroll when ajax date is clicked and triggers a distant
    // submit button lower down the page.
    $form['actions']['submit']['#attributes'] = array('onFocus' => 'window.scrollTo(0, 0)');
  }

  // Event dates use date_range, however calendars use a single date field. Therefore we have to populate a single date
  // field with the date_range field populated by the user in order to use the calendar!
  if ($form_id == 'node_events_form' || $form_id == 'node_events_edit_form') {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_custom_events_events_form_submit';
      }
    }
  }
}

// Events need to add the start date in its date_range field to the single date field
// that is compatible with the calendar module. Called from the form_alter hook in this module.
function _custom_events_events_form_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::config('custom_events.settings');

  if ($config->get('source_date_field') && $config->get('calendar_date_field')) {
    $values = $form_state->getValues();

    if ($date = $form_state->getValue($config->get('source_date_field'))) {
      $node = Node::load($values['nid']);

      // If the date is not set, then the calendar date is blank.
      if (!empty($date[0]['value'])) {
        $date = $date[0]['value']->format('Y-m-d');
      } else {
        $date = '';
      }

      // Populate the data and save the node.
      $node->set($config->get('calendar_date_field'), $date);
      $node->save();
    }
  }
}

/**
 * Create the calendar date box.
 */
function custom_events_preprocess_calendar_datebox(&$vars) {
  $date = $vars['date'];
  $view = $vars['view'];
  $vars['day'] = intval(substr($date, 8, 2));
  $full_date_arg = str_replace('-', '', $date);
  $day_url = CalendarHelper::getURLForGranularity($view, 'day', [$full_date_arg]);

  if ($day_url) {
    // $vars['link'] = \Drupal::l($vars['day'], $day_url);
    $vars['link'] = Link::fromTextAndUrl($vars['day'], $day_url)->toRenderable();
    $vars['link']['#attributes']['rel'] = $date;
  }
  else {
    $vars['link'] = $vars['day'];
  }

  $vars['granularity'] = $view->dateInfo->getGranularity();
  $vars['mini'] = !empty($view->styleInfo->isMini());
  if ($vars['mini']) {
    if (!empty($vars['selected'])) {
      $vars['class'] = 'mini-day-on';
    }
    else {
      $vars['class'] = 'mini-day-off';
    }
  }
  else {
    $vars['class'] = 'day';
  }
}
